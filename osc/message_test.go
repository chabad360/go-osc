package osc

import (
	"reflect"
	"testing"
)

func TestMessage_Append(t *testing.T) {
	oscAddress := "/address"
	message := NewMessage(oscAddress)
	if message.Address != oscAddress {
		t.Errorf("OSC address should be \"%s\" and is \"%s\"", oscAddress, message.Address)
	}

	message.Append("string argument")
	message.Append(int32(123456789))
	message.Append(true)

	if len(message.Arguments) != 3 {
		t.Errorf("Number of arguments should be %d and is %d", 3, len(message.Arguments))
	}
}

func TestMessage_Equals(t *testing.T) {
	msg1 := NewMessage("/address")
	msg2 := NewMessage("/address")
	msg1.Append(int32(1234))
	msg2.Append(int32(1234))
	msg1.Append("test string")
	msg2.Append("test string")

	if !reflect.DeepEqual(msg1, msg2) {
		t.Error("Messages should be equal")
	}
}

func TestOscMessageMatch(t *testing.T) {
	tc := []struct {
		desc        string
		addr        string
		addrPattern string
		want        bool
	}{
		{
			"match everything",
			"*",
			"/a/b",
			true,
		},
		{
			"don't match",
			"/a/b",
			"/a",
			false,
		},
		{
			"match alternatives",
			"/a/{foo,bar}",
			"/a/foo",
			true,
		},
		{
			"don't match if address is not part of the alternatives",
			"/a/{foo,bar}",
			"/a/bob",
			false,
		},
	}

	for _, tt := range tc {
		msg := NewMessage(tt.addr)

		got := msg.Match(tt.addrPattern)
		if got != tt.want {
			t.Errorf("%s: msg.Match('%s') = '%t', want = '%t'", tt.desc, tt.addrPattern, got, tt.want)
		}
	}
}

var result interface{}

func BenchmarkMessageMarshalBinary(b *testing.B) {
	var buf []byte
	b.ReportAllocs()
	b.ResetTimer()
	for n := 0; n < b.N; n++ {
		buf, _ = temp.MarshalBinary()
	}
	result = buf
}

func TestMessage_MarshalBinary(t *testing.T) {
	tests := []struct {
		name    string
		message *Message
		want    []byte
		wantErr bool
	}{
		{"sample1", sample19Msg, sample19, false},
		{"sample2", sample20Msg, sample20, false},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := tt.message.MarshalBinary()
			if (err != nil) != tt.wantErr {
				t.Errorf("MarshalBinary() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("MarshalBinary() got = %s, want %s", got, tt.want)
			}
		})
	}
}

var (
	// https://opensoundcontrol.stanford.edu/spec-1_0-examples.html#osc-message-examples
	// /oscillator/4/frequency ,f 440.0
	sample19    = []byte{47, 111, 115, 99, 105, 108, 108, 97, 116, 111, 114, 47, 52, 47, 102, 114, 101, 113, 117, 101, 110, 99, 121, 0, 44, 102, 0, 0, 67, 220, 0, 0}
	sample19Msg = NewMessage("/oscillator/4/frequency", float32(440.0))

	// /foo ,iisff 1000 -1 "hello" 1.234 5.678
	sample20    = []byte{47, 102, 111, 111, 0, 0, 0, 0, 44, 105, 105, 115, 102, 102, 0, 0, 0, 0, 3, 232, 255, 255, 255, 255, 104, 101, 108, 108, 111, 0, 0, 0, 63, 157, 243, 182, 64, 181, 178, 45}
	sample20Msg = NewMessage("/foo", int32(1000), int32(-1), "hello", float32(1.234), float32(5.678))
)

// Code generated by testcasegen.go DO NOT EDIT

type testCase struct {
	name    string
	raw     []byte
	obj     Packet
	wantErr bool
}

//nolint:lll
var (
	testCases = []testCase{
		{"message_anyof",
			[]byte{0x2f, 0x6f, 0x73, 0x5b, 0x61, 0x2d, 0x7a, 0x5d, 0x0, 0x0, 0x0, 0x0, 0x2c, 0x0, 0x0, 0x0},
			NewMessage("/os[a-z]"), false}, // /os[a-z] ,
		{"message_blob",
			[]byte{0x2f, 0x6f, 0x73, 0x63, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x70, 0x61, 0x74, 0x68, 0x0, 0x0, 0x0, 0x2c, 0x62, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf, 0x14, 0x1e, 0x17, 0x57, 0x2, 0x1b, 0x26, 0x2c, 0x59, 0xf0, 0x25, 0x16, 0x57, 0x62, 0x63, 0x0},
			NewMessage("/osc/message/path", []byte{0x14, 0x1e, 0x17, 0x57, 0x2, 0x1b, 0x26, 0x2c, 0x59, 0xf0, 0x25, 0x16, 0x57, 0x62, 0x63}), false}, // /osc/message/path ,b [20 30 23 87 2 27 38 44 89 240 37 22 87 98 99]
		{"message_blob_int64",
			[]byte{0x2f, 0x6f, 0x73, 0x63, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x70, 0x61, 0x74, 0x68, 0x0, 0x0, 0x0, 0x2c, 0x62, 0x68, 0x0, 0x0, 0x0, 0x0, 0xf, 0x14, 0x1e, 0x17, 0x57, 0x2, 0x1b, 0x26, 0x2c, 0x59, 0xf0, 0x25, 0x16, 0x57, 0x62, 0x63, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5, 0x4f, 0x52},
			NewMessage("/osc/message/path", []byte{0x14, 0x1e, 0x17, 0x57, 0x2, 0x1b, 0x26, 0x2c, 0x59, 0xf0, 0x25, 0x16, 0x57, 0x62, 0x63}, int64(347986)), false}, // /osc/message/path ,bh [20 30 23 87 2 27 38 44 89 240 37 22 87 98 99] 347986
		{"message_either",
			[]byte{0x2f, 0x6f, 0x73, 0x63, 0x7b, 0x31, 0x32, 0x33, 0x2c, 0x61, 0x62, 0x63, 0x7d, 0x0, 0x0, 0x0, 0x2c, 0x0, 0x0, 0x0},
			NewMessage("/osc{123,abc}"), false}, // /osc{123,abc} ,
		{"message_empty",
			[]byte{0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x2f, 0x31, 0x2f, 0x63, 0x6c, 0x69, 0x70, 0x73, 0x2f, 0x31, 0x2f, 0x0, 0x0, 0x2c, 0x0, 0x0, 0x0},
			NewMessage("/composition/layers/1/clips/1/"), false}, // /composition/layers/1/clips/1/ ,
		{"message_false",
			[]byte{0x2f, 0x6f, 0x73, 0x63, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x70, 0x61, 0x74, 0x68, 0x0, 0x0, 0x0, 0x2c, 0x46, 0x0, 0x0},
			NewMessage("/osc/message/path", false), false}, // /osc/message/path ,F
		{"message_float32",
			[]byte{0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x2f, 0x31, 0x2f, 0x63, 0x6c, 0x69, 0x70, 0x73, 0x2f, 0x31, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x0, 0x0, 0x0, 0x0, 0x2c, 0x64, 0x0, 0x0, 0x3f, 0xbf, 0x9a, 0xdd, 0x37, 0x39, 0x63, 0x5f},
			NewMessage("/composition/layers/1/clips/1/transport/position", float64(0.123457)), false}, // /composition/layers/1/clips/1/transport/position ,d 0.123457
		{"message_int",
			[]byte{0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x70, 0x61, 0x74, 0x68, 0x0, 0x0, 0x0, 0x2c, 0x69, 0x0, 0x0, 0x11, 0x21, 0x3c, 0xf7},
			NewMessage("/message/path", int32(287390967)), false}, // /message/path ,i 287390967
		{"message_int64",
			[]byte{0x2f, 0x6f, 0x73, 0x63, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x70, 0x61, 0x74, 0x68, 0x0, 0x0, 0x0, 0x2c, 0x68, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5, 0x4f, 0x52},
			NewMessage("/osc/message/path", int64(347986)), false}, // /osc/message/path ,h 347986
		{"message_nil",
			[]byte{0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x2f, 0x31, 0x2f, 0x63, 0x6c, 0x69, 0x70, 0x73, 0x2f, 0x31, 0x2f, 0x72, 0x75, 0x6e, 0x0, 0x0, 0x0, 0x2c, 0x4e, 0x0, 0x0},
			NewMessage("/composition/layers/1/clips/1/run", nil), false}, // /composition/layers/1/clips/1/run ,N
		{"message_noneof",
			[]byte{0x2f, 0x6f, 0x73, 0x63, 0x5b, 0x21, 0x61, 0x2d, 0x78, 0x5d, 0x0, 0x0, 0x2c, 0x0, 0x0, 0x0},
			NewMessage("/osc[!a-x]"), false}, // /osc[!a-x] ,
		{"message_qmark",
			[]byte{0x2f, 0x6f, 0x73, 0x3f, 0x0, 0x0, 0x0, 0x0, 0x2c, 0x0, 0x0, 0x0},
			NewMessage("/os?"), false}, // /os? ,
		{"message_someof",
			[]byte{0x2f, 0x6f, 0x73, 0x63, 0x5b, 0x61, 0x62, 0x63, 0x31, 0x32, 0x33, 0x5d, 0x5b, 0x61, 0x62, 0x63, 0x31, 0x32, 0x33, 0x5d, 0x5b, 0x61, 0x62, 0x63, 0x31, 0x32, 0x33, 0x5d, 0x0, 0x0, 0x0, 0x0, 0x2c, 0x0, 0x0, 0x0},
			NewMessage("/osc[abc123][abc123][abc123]"), false}, // /osc[abc123][abc123][abc123] ,
		{"message_string",
			[]byte{0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x2f, 0x31, 0x2f, 0x63, 0x6c, 0x69, 0x70, 0x73, 0x2f, 0x31, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x0, 0x0, 0x2c, 0x73, 0x0, 0x0, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x63, 0x6c, 0x69, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x0, 0x0},
			NewMessage("/composition/layers/1/clips/1/name", "extended_clip_name"), false}, // /composition/layers/1/clips/1/name ,s "extended_clip_name"
		{"message_string_int",
			[]byte{0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x70, 0x61, 0x74, 0x68, 0x0, 0x0, 0x0, 0x2c, 0x73, 0x69, 0x0, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x0, 0x0, 0x0, 0x11, 0x21, 0x3c, 0xf7},
			NewMessage("/message/path", "hello", int32(287390967)), false}, // /message/path ,si "hello" 287390967
		{"message_string_space",
			[]byte{0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x2f, 0x31, 0x2f, 0x63, 0x6c, 0x69, 0x70, 0x73, 0x2f, 0x31, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x0, 0x0, 0x2c, 0x73, 0x0, 0x0, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x20, 0x63, 0x6c, 0x69, 0x70, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x0, 0x0},
			NewMessage("/composition/layers/1/clips/1/name", "extended clip name"), false}, // /composition/layers/1/clips/1/name ,s "extended clip name"
		{"message_string_string",
			[]byte{0x2f, 0x6f, 0x73, 0x63, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x70, 0x61, 0x74, 0x68, 0x0, 0x0, 0x0, 0x2c, 0x73, 0x73, 0x0, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x0, 0x0, 0x0, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x0, 0x0, 0x0},
			NewMessage("/osc/message/path", "hello", "world"), false}, // /osc/message/path ,ss "hello" "world"
		{"message_true",
			[]byte{0x2f, 0x6f, 0x73, 0x63, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x70, 0x61, 0x74, 0x68, 0x0, 0x0, 0x0, 0x2c, 0x54, 0x0, 0x0},
			NewMessage("/osc/message/path", true), false}, // /osc/message/path ,T
		{"bundle_empty",
			[]byte{0x23, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0},
			NewBundleWithTime(Timetag(0).Time()), false}, // #bundle T:0.0
		{"bundle_super_complex",
			[]byte{0x23, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x0, 0xe4, 0x17, 0x69, 0x64, 0x27, 0xc1, 0x23, 0xb9, 0x0, 0x0, 0x0, 0x34, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x70, 0x61, 0x74, 0x68, 0x0, 0x0, 0x0, 0x2c, 0x73, 0x4e, 0x64, 0x62, 0x54, 0x69, 0x0, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x0, 0x0, 0x0, 0x3f, 0xf3, 0xc0, 0x83, 0x12, 0x6e, 0x97, 0x8d, 0x0, 0x0, 0x0, 0x4, 0x59, 0x1d, 0x26, 0x2f, 0x11, 0x21, 0x3c, 0xf7, 0x0, 0x0, 0x0, 0x58, 0x23, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x0, 0xe4, 0x17, 0x69, 0x64, 0x27, 0xc1, 0x23, 0xb9, 0x0, 0x0, 0x0, 0x18, 0x2f, 0x6f, 0x73, 0x63, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x70, 0x61, 0x74, 0x68, 0x0, 0x0, 0x0, 0x2c, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x28, 0x2f, 0x6f, 0x73, 0x63, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x70, 0x61, 0x74, 0x68, 0x0, 0x0, 0x0, 0x2c, 0x73, 0x73, 0x0, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x0, 0x0, 0x0, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2c, 0x23, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x0, 0xe4, 0x17, 0x69, 0x64, 0x27, 0xc1, 0x23, 0xb9, 0x0, 0x0, 0x0, 0x18, 0x2f, 0x70, 0x61, 0x74, 0x68, 0x2f, 0x74, 0x6f, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x0, 0x0, 0x0, 0x0, 0x2c, 0x4e, 0x0, 0x0},
			NewBundleWithTime(Timetag(16435721243996529593).Time(), NewMessage("/message/path", "hello", nil, float64(1.234500), []byte{0x59, 0x1d, 0x26, 0x2f}, true, int32(287390967)), NewBundleWithTime(Timetag(16435721243996529593).Time(), NewMessage("/osc/message/path"), NewMessage("/osc/message/path", "hello", "world")), NewBundleWithTime(Timetag(16435721243996529593).Time(), NewMessage("/path/to/message", nil))), false}, // #bundle T:3826739556.666969017  (/message/path ,sNdbTi "hello"  1.234500 [89 29 38 47]  287390967) (#bundle  T:3826739556.666969017  (/osc/message/path ,) (/osc/message/path ,ss "hello" "world")) (#bundle  T:3826739556.666969017  (/path/to/message ,N ))
		{"bundle_timetag",
			[]byte{0x23, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x0, 0xe4, 0x17, 0x3b, 0xe4, 0x13, 0x4f, 0xb2, 0x16},
			NewBundleWithTime(Timetag(16435671215874486806).Time()), false}, // #bundle T:3826727908.323990038
		{"bundle_timetag_empty_message",
			[]byte{0x23, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x0, 0xe4, 0x17, 0x3c, 0x42, 0x2c, 0x82, 0x25, 0xb, 0x0, 0x0, 0x0, 0x18, 0x2f, 0x6f, 0x73, 0x63, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x70, 0x61, 0x74, 0x68, 0x0, 0x0, 0x0, 0x2c, 0x0, 0x0, 0x0},
			NewBundleWithTime(Timetag(16435671620024149259).Time(), NewMessage("/osc/message/path")), false}, // #bundle T:3826728002.746726667  (/osc/message/path ,)
		{"bundle_timetag_message_string",
			[]byte{0x23, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x0, 0xe4, 0x17, 0x3c, 0x56, 0x1b, 0x9, 0x41, 0xc6, 0x0, 0x0, 0x0, 0x20, 0x2f, 0x6f, 0x73, 0x63, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x70, 0x61, 0x74, 0x68, 0x0, 0x0, 0x0, 0x2c, 0x73, 0x0, 0x0, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x0, 0x0},
			NewBundleWithTime(Timetag(16435671705630360006).Time(), NewMessage("/osc/message/path", "string")), false}, // #bundle T:3826728022.453591494  (/osc/message/path ,s "string")
	}
)
